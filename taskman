!#/usr/bin/env ruby
require "bundler"

TM_PATH = File.expand_path(File.join(__FILE__, ".."))
# require 'json'

Bundler.require

require "#{TM_PATH}/lib/ext"
require "#{TM_PATH}/lib/task"
require "#{TM_PATH}/lib/command"
require "#{TM_PATH}/lib/error"
# class Task

#   OPTIONS_DEFAULT = {
#     flags: [],
#     date: nil
#   }

#   # Ajouter
#   def self.add params
#     contenu = params.shift
#     id = @tableau_taches.map(&:id).max+1


#     new_task = Task.new id, contenu
#     # tache = {}


#     params.each do |argument|
#       champ, valeur = argument.split(':')

#       if champ == "flags"
#         new_task.flags = value.split(',')
#       else
#         raise "Parametre incorrect: #{champ}"
#       end
#     end
#     @tableau_taches << new_task
#   end


#   def self.get_task id
#     @tableau_taches.select{|tache| tache.id == id}.first
#   end

#   def self.delete id
#     @tableau_taches.reject!{|tache| tache.id==id}
#   end

#   def self.load file
#     str = File.read(file)
#     tableau = JSON.parse(str)

#     @tableau_taches = tableau.map do |tache|
#       Task.new(tache["id"], tache["content"], {flags: tache["flags"]}, tache["is_done"])
#     end

#   end


#   def self.save file
#     File.open(file, "w") do |file|
#       file.write(@tableau_taches.to_json)
#     end
#   end

#   def self.display
#     puts "*****TASKMAN*****"
#     puts "LISTE DES TACHES"
#     @tableau_taches.each(&:display)
#   end


#   attr_accessor :id, :content, :flags
#   attr_reader :is_done

#   def initialize id, content, opts={}, is_done = false
#     opts = OPTIONS_DEFAULT.merge(opts)

#     @id = id
#     @content = content
#     @flags = opts[:flags]
#     @is_done = is_done
#   end

#   def to_json opts={}
#     {
#       id: @id,
#       content: @content,
#       flags: @flags,
#       is_done: @is_done
#     }.to_json(opts)

#   end
#   def display
#     puts " [#{@is_done? "X":" "}] #{@id} - #{@content} (#{@flags.join(',')})"
#   end

#   def done
#     @is_done = true
#   end

#   @tableau_taches = []
# end

# module Command
#   @commands = {}

#   def self.register action
#     @commands[action.command] = action
#   end

#   def self.launch!
#     command = ARGV.shift
#     is_executed = false
#     @commands.each do |k, action|
#       if k == command
#           is_executed = true
#           action.apply(ARGV)
#       end
#     end

#     unless is_executed
#       display_help
#     end
#   end

#   def self.display_help
#     puts "taskman [commande] [contenu|id] [ options...]"
#     puts "............................................."
#     @commands.each do |k, action|
#       puts action.to_s
#     end
#   end

#   class Action
#     attr_accessor :command, :arguments, :description, :block

#     def initialize command, arguments, description, &block
#       @command = command
#       @arguments = arguments
#       @description = description
#       @block = block
#     end

#     def apply arguments
#       block.call(arguments)
#     end

#     def register!
#       Command.register(self)
#     end

#     def to_s
#       puts "#{@command} #{@arguments}\t *#{@description}"
#     end
#   end


#   class TaskAction < Action
#     def initialize command, arguments, description, &block
#       super command, arguments, description, &block
#     end

#     def apply arguments
#       id = arguments.shift.to_i
#       task = Task.get_task(id)

#       if task.nil?

#         puts "la tache #{id} n'existe pas!"
#         exit
#       end
#       block.call(task, arguments)
#     end

#     def to_s
#       puts "#{@command} :id #{@arguments}\t *#{@description}"
#     end

#   end
# end

# def on_command action
#   $command ||= ARGV.shift

#   if action == $command
#     yield (ARGV)
#     $command_faite = true
#   end

# end


Task.load "#{TM_PATH}/conf/tasks.json"

# Command::Action.new('add', ':contenu (options...)', 'cree une nouvelle tache.') do |arguments|
#   Task.add(arguments)
# end.register!

# Command::TaskAction.new('del', ':id ', 'Supprimer une tache') do |task, args|
#   Task.delete task.id
# end.register!


Command.launch!
# Task.displ ay
Task.save "#{TM_PATH}/conf/tasks.json"
